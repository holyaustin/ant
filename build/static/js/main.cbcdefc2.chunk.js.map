{"version":3,"sources":["covalant_scripts.js","assets/twitter-logo.svg","constants.js","Components/LoadingIndicator/index.js","Components/SelectCharacter/index.js","Components/Arena/index.js","assets/bg.gif","App.js","index.js"],"names":["forEach","item","index","option","document","createElement","text","name","value","address","getElementById","appendChild","CONTRACT_ADDRESS","transformCharacterData","characterData","imageURI","hp","toNumber","maxHp","attackDamage","LoadingIndicator","className","SelectCharacter","setCharacterNFT","useState","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","mintCharacterNFTAction","characterId","a","price","console","log","mintCharacterNFT","ethers","utils","parseEther","mintTxn","wait","warn","useEffect","ethereum","window","signer","providers","Web3Provider","getSigner","Contract","myEpicGame","abi","getCharacters","getAllDefaultCharacters","charactersTxn","map","error","onCharacterMint","sender","tokenId","characterIndex","checkIfUserHasNFT","characterNFT","on","off","length","character","src","alt","type","onClick","Arena","boss","setBoss","attackState","setAttackState","showToast","setShowToast","runAttackAction","attackBoss","txn","setTimeout","fetchBoss","getBigBoss","bossTxn","mintReward","request","method","accounts","options","url","headers","Authorization","data","chain","description","file_url","mint_to_address","axios","then","response","catch","onAttackComplete","newBossHp","newPlayerHp","bossHp","playerHp","prevState","alert","id","max","TWITTER_HANDLE","TWITTER_LINK","App","currentAccount","setCurrentAccount","isLoading","setIsLoading","checkIfWalletIsConnected","account","checkNetwork","networkVersion","connectWalletAction","fetchNFTMetadata","provider","covalent","process","COVALENT_API_CKEY","covalentRes","get","landingimage","class","size","onclick","twitterLogo","href","target","rel","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.cbcdefc2.chunk.js","sourcesContent":["/* eslint-disable array-callback-return */\n/* eslint-disable no-unused-vars */\n// Demo API Key\nconst APIKEY = 'ckey_c2ff142ae0e243359fcfde35554'\n\n// Blockchain network setup\nconst chainId = 43114 // Avalanche Mainnet\n\n// Covalent API Endpoints\nconst nftIdsEndpoint = 'nft_token_ids'\nconst nftMetadataEndpoint = 'nft_metadata'\n\n// List of supported_collection\nconst supported_collection = [\n  {\n    \"name\": \"CryptoSeals\",\n    \"address\": \"0x0540E4EE0C5CdBA347C2f0E011ACF8651bB70Eb9\"\n  },\n  {\n    \"name\": \"Avaxtars\",\n    \"address\": \"0x53d2230EAC25643cd0772B310EEBb569a100eA73\"\n  }\n]\n\n// eslint-disable-next-line no-unused-vars\nfunction getNFTIdData() {\n    // Get key HTML elements and reset table content\n    const ul = document.getElementById('metadata');\n    const tableRef = document.getElementById('tokenTable');\n    tableRef.innerHTML =\n    `<thead class=\"thead-dark\">\n            <tr>\n                <th>Image</th>\n                <th>Owner</th>\n                <th>Link</th>\n            </tr>\n        </thead>\n        <tbody>\n        </tbody>`;\n\n    // Covalent API request setup\n    const address = document.getElementById('address').value || '0x0540E4EE0C5CdBA347C2f0E011ACF8651bB70Eb9';\n\n    const url = new URL(`https://api.covalenthq.com/v1/${chainId}/tokens/${address}/${nftIdsEndpoint}/?&key=${APIKEY}`);\n\n    // Use Fetch API to get Covalent data\n    fetch(url)\n    .then((resp) => resp.json())\n    .then(function(data) {\n        let tokens = data.data.items;\n        \n        // Update wallet metadata\n        ul.innerHTML = \n            `<li> Contract address: ${data.data.items[0].contract_address} </li>` +\n            `<li> Last update: ${data.data.updated_at} </li>` \n            \n\n        return tokens.map(function(token) { // Map through the results and for each run the code below\n        if (token.contract_decimals > 0) {\n            let balance = parseInt(token.balance) / Math.pow(10, token.contract_decimals);\n        } else {\n            let balance = parseInt(token.balance);\n        }\n        tableRef.insertRow().innerHTML = \n            \n            `<td> ${token.contract_name} </td>` +\n            `<td> ${token.contract_ticker_symbol} </td>` +\n            `<td> ${token.token_id} </td>`;\n        })\n    })\n}\n\nfunction getNFTMetaData() {\n    // Get key HTML elements and reset table content\n    const ul = document.getElementById('metadata');\n    const tableRef = document.getElementById('tokenTable');\n    tableRef.innerHTML = \n        `<thead class=\"thead-dark\">\n            <tr>\n                <th>Image</th>\n                <th>Owner</th>\n                <th>Link</th>\n            </tr>\n        </thead>\n        <tbody>\n        </tbody>`;\n\n    // Covalent API request setup\n    const address = document.getElementById('address').value;\n    const tokenId = document.getElementById('tokenId').value;    \n\n    const url = new URL(`https://api.covalenthq.com/v1/43114/tokens/${address}/${nftMetadataEndpoint}/${tokenId}/?&key=${APIKEY}`);\n\n    // Use Fetch API to get Covalent data\n    fetch(url)\n    .then((resp) => resp.json())\n    .then(function(data) {\n        let tokens = data.data.items;\n        \n        // Update wallet metadata\n        ul.innerHTML = \n            `<li> Contract address: ${data.data.items[0].contract_address} </li>` +\n            `<li> Last update: ${data.data.updated_at} </li>` \n            \n\n        return tokens.map(function(token) { // Map through the results and for each run the code below\n        if (token.contract_decimals > 0) {\n            let balance = parseInt(token.balance) / Math.pow(10, token.contract_decimals);\n        } else {\n            let balance = parseInt(token.balance);\n        }\n        console.log(token.nft_data);\n        tableRef.insertRow().innerHTML = \n            \n            `<td> <img src=\"${token.nft_data[0].external_data.image}\" width=200 height=200></img></td>` +\n            `<td><a href=\"https://cchain.explorer.avax.network/address/${token.nft_data[0].owner}\" target=\"_blank\"> ${token.nft_data[0].owner} </a></td>` +\n            `<td><a href=\"${token.nft_data[0].token_url}\">View API data</a> </td>`;\n        })\n    })\n}\n\nsupported_collection.forEach((item, index) => {\n  var option = document.createElement(\"option\");\n  option.text = item.name;\n  option.value = item.address;\n  var collection = document.getElementById('address');\n  collection.appendChild(option);\n});","export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","const CONTRACT_ADDRESS = '0xa513E6E4b8f2a923D98304ec87F64353C4D5C853';\n\n\n/*\n * Add this method and make sure to export it on the bottom!\n */\nconst transformCharacterData = (characterData) => {\n    return {\n      name: characterData.name,\n      imageURI: characterData.imageURI,\n      hp: characterData.hp.toNumber(),\n      maxHp: characterData.maxHp.toNumber(),\n      attackDamage: characterData.attackDamage.toNumber(),\n    };\n  };\n  \n  export { CONTRACT_ADDRESS, transformCharacterData };","import React from 'react';\nimport './LoadingIndicator.css';\n\nconst LoadingIndicator = () => {\n  return (\n    <div className=\"lds-ring\">\n      <div></div>\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default LoadingIndicator;\n","import React, { useEffect, useState } from 'react';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport LoadingIndicator from '../LoadingIndicator';\n\n/*\n * Don't worry about setCharacterNFT just yet, we will talk about it soon!\n */\nconst SelectCharacter = ({ setCharacterNFT }) => {\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n    /*\n * New minting state property we will be using\n */\nconst [mintingCharacter, setMintingCharacter] = useState(false);\n\n  // Actions\n  const mintCharacterNFTAction = async (characterId) => {\n  const price = '0.001';\n  try {\n    if (gameContract) {\n      /*\n       * Show our loading indicator\n       */\n      setMintingCharacter(true); \n      console.log('Minting character in progress...');\n      const mintTxn = await gameContract.mintCharacterNFT((characterId), {value: ethers.utils.parseEther(price)});    \n      await mintTxn.wait();\n      console.log('Minted character costs', price );\n      console.log(mintTxn);\n      /*\n       * Hide our loading indicator when minting is finished\n       */\n      setMintingCharacter(false);\n    }\n  } catch (error) {\n    console.warn('MintCharacterAction Error:', error);\n    /*\n     * If there is a problem, hide the loading indicator as well\n     */\n    setMintingCharacter(false);\n  }\n};\n\n  // UseEffect\n  useEffect(() => {\n  const { ethereum } = window;\n\n  if (ethereum) {\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    /*\n     * This is the big difference. Set our gameContract in state.\n     */\n    setGameContract(gameContract);\n  } else {\n    console.log('Ethereum object not found');\n  }\n  }, []);\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n  \n        const charactersTxn = await gameContract.getAllDefaultCharacters();\n        console.log('charactersTxn:', charactersTxn);\n  \n        const characters = charactersTxn.map((characterData) =>\n          transformCharacterData(characterData)\n        );\n  \n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n  \n    /*\n     * Add a callback method that will fire when this event is received\n     */\n    const onCharacterMint = async (sender, tokenId, characterIndex) => {\n      console.log(\n        `CharacterNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} characterIndex: ${characterIndex.toNumber()}`\n      );\n  \n      /*\n       * Once our character NFT is minted we can fetch the metadata from our contract\n       * and set it in state to move onto the Arena\n       */\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n  \n    if (gameContract) {\n      getCharacters();\n  \n      /*\n       * Setup NFT Minted Listener\n       */\n      gameContract.on('CharacterNFTMinted', onCharacterMint);\n    }\n  \n    return () => {\n      /*\n       * When your component unmounts, let;s make sure to clean up this listener\n       */\n      if (gameContract) {\n        gameContract.off('CharacterNFTMinted', onCharacterMint);\n      }\n    };\n  }, [gameContract, setCharacterNFT]);\n\n  // Render Methods\n    const renderCharacters = () =>\n    characters.map((character, index) => (\n      <div className=\"character-item\" key={character.name}>\n        <div className=\"name-container\">\n          <p>{character.name}</p>\n        </div>\n        <img src={character.imageURI} alt={character.name} />\n        <button\n          type=\"button\"\n          className=\"character-mint-button\"\n          onClick={()=> mintCharacterNFTAction(index)}\n        >{`Mint ${character.name}`}</button>\n      </div>\n    ));\n\n    return (\n      <div className=\"select-character-container\">\n        <h2>Mint Your Soldier Ant Colony. Choose wisely.</h2>\n        {characters.length > 0 && (\n          <div className=\"character-grid\">{renderCharacters()}</div>\n        )}\n        {/* Only show our loading state if mintingCharacter is true */}\n        {mintingCharacter && (\n          <div className=\"loading\">\n            <div className=\"indicator\">\n              <LoadingIndicator />\n              <p>Minting In Progress...</p>\n            </div>\n            <img\n              src=\"https://media2.giphy.com/media/61tYloUgq1eOk/giphy.gif?cid=ecf05e47dg95zbpabxhmhaksvoy8h526f96k4em0ndvx078s&rid=giphy.gif&ct=g\"\n              alt=\"Minting loading indicator\"\n            />\n          </div>\n        )}\n      </div>\n    );\n};\n\nexport default SelectCharacter;","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport axios from \"axios\";\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport myEpicGame from '../../utils/MyEpicGame.json';\nimport './Arena.css';\nimport SelectCharacter from '../SelectCharacter';\nimport LoadingIndicator from '../LoadingIndicator';\n\n\n/*\n * We pass in our characterNFT metadata so we can show a cool card in our UI\n */\nconst Arena = ({ characterNFT, setCharacterNFT }) => {\n  // State\nconst [gameContract, setGameContract] = useState(null);\nconst [boss, setBoss] = useState(null);\nconst [attackState, setAttackState] = useState('');\n/*\n* Toast state management\n*/\nconst [showToast, setShowToast] = useState(false);\n\n\nconst runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const txn = await gameContract.attackBoss();\n        await txn.wait();\n        console.log(txn);\n        setAttackState('hit');\n              \n        /*\n        * Set your toast state to true and then false 5 seconds later\n        */\n        setShowToast(true);\n        setTimeout(() => {\n          setShowToast(false);\n        }, 5000);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setAttackState('');\n    }\n  };\n\n  // UseEffects\n  useEffect(() => {\n    const { ethereum } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(\n        CONTRACT_ADDRESS,\n        myEpicGame.abi,\n        signer\n      );\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n\n  useEffect(() => {\n    const fetchBoss = async () => {\n        const bossTxn = await gameContract.getBigBoss();\n        console.log('Boss:', bossTxn);\n        setBoss(transformCharacterData(bossTxn));\n    };\n\n    /*\n    * Setup logic when this event is fired off\n    \n    */\n\n         // NFTPort code here\n         async function mintReward() {\n          const { ethereum } = window;\n          const accounts = await ethereum.request({\n            method: 'eth_requestAccounts',\n          });\n\n          console.log('Connected', accounts[0]);\n          //const playerAccount = deploy;\n\n\n          const options = {\n            method: 'POST',\n            url: 'https://api.nftport.xyz/v0/mints/easy/urls',\n            headers: { 'Content-Type': 'application/json', Authorization: '768bfb7a-087d-4ee1-8bb0-5498cc36ad46' },\n            data: {\n              chain: 'polygon',\n              name: 'Soldier Ant NFT',\n              description: 'Soldier Ant NFT Reward for winning the game',\n              file_url: 'https://gateway.lighthouse.storage/ipfs/Qmaxc7iEKNGCFaPwCA8noaC67TxtFfj3waTBU8Wpdhvf5p',\n              mint_to_address: accounts[0],\n            },\n          };\n      \n          axios.request(options).then((response) => {\n            console.log(response.data);\n          }).catch((error) => {\n            console.error(error);\n          });\n        }\n\n       \n\n\n    const onAttackComplete = (newBossHp, newPlayerHp) => {\n        const bossHp = newBossHp.toNumber();\n        const playerHp = newPlayerHp.toNumber();\n\n\n        console.log(`AttackComplete: Boss Hp: ${bossHp} Player Hp: ${playerHp}`);\n\n        /*\n        * Update both player and boss Hp\n        */\n        setBoss((prevState) => {\n            return { ...prevState, hp: bossHp };\n            \n        });\n\n        setCharacterNFT((prevState) => {\n            return { ...prevState, hp: playerHp };\n        });\n\n        if (playerHp === 0) {\n          console.log('Game Over... You Lost');\n          alert(\"Game Over... You lost. No food for you and your colony\")\n          mintReward()\n          return <SelectCharacter />;\t\n        }\n        if (bossHp === 0) {\n          console.log('Game Over... You Won');\n          alert(\"Game Over... You Won the battle. Enjoy the food with your colony\")\n          mintReward()\n        }\n    };\n\n    if (gameContract) {\n        fetchBoss();\n        gameContract.on('AttackComplete', onAttackComplete);\n    }\n\n    /*\n    * Make sure to clean up this event when this component is removed\n    */\n    return () => {\n        if (gameContract) {\n            gameContract.off('AttackComplete', onAttackComplete);\n        }\n    }\n}, [gameContract, setCharacterNFT]);\n\n  return (\n    <div className=\"arena-container\">\n    {/* Add your toast HTML right here */}\n    {boss && characterNFT && (\n      <div id=\"toast\" className={showToast ? 'show' : ''}>\n        <div id=\"desc\">{`💥 ${boss.name} was hit for ${characterNFT.attackDamage}!`}</div>\n      </div>\n    )}\n\n      {/* Boss : Replace your Boss UI with this */}\n      {boss && (\n    <div className=\"boss-container\">\n      <div className={`boss-content  ${attackState}`}>\n        <h2>🔥 {boss.name} 🔥</h2>\n        <div className=\"image-content\">\n          <img src={boss.imageURI} alt={`Boss ${boss.name}`} />\n          <div className=\"health-bar\">\n            <progress value={boss.hp} max={boss.maxHp} />\n            <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\n          </div>\n        </div>\n      </div>\n      <div className=\"attack-container\">\n        <button className=\"cta-button\" onClick={runAttackAction}>\n          {`💥 Attack ${boss.name}`}\n        </button>\n      </div>\n      {/* Add this right under your attack button */}\n      {attackState === 'attacking' && (\n        <div className=\"loading-indicator\">\n          <LoadingIndicator />\n          <p>Attacking ⚔️</p>\n        </div>\n      )}\n    </div>\n  )}\n  \n    {/* Character NFT : Replace your Character UI with this */}\n    {characterNFT && (\n      <div className=\"players-container\">\n        <div className=\"player-container\">\n          <h2>Your Character</h2>\n          <div className=\"player\">\n            <div className=\"image-content\">\n              <h2>{characterNFT.name}</h2>\n              <img\n                src={characterNFT.imageURI}\n                alt={`Character ${characterNFT.name}`}\n              />\n              <div className=\"health-bar\">\n                <progress value={characterNFT.hp} max={characterNFT.maxHp} />\n                <p>{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\n              </div>\n            </div>\n            <div className=\"stats\">\n              <h4>{`⚔️ Attack Damage: ${characterNFT.attackDamage}`}</h4>\n            </div>\n          </div>\n        </div>\n        {/* <div className=\"active-players\">\n          <h2>Active Players</h2>\n          <div className=\"players-list\">{renderActivePlayersList()}</div>\n        </div> */}\n      </div>\n    )}\n  </div>\n);\n};\n\nexport default Arena;","export default __webpack_public_path__ + \"static/media/bg.2de11bea.gif\";","import React, { useEffect, useState } from 'react';\nimport { ethers } from 'ethers';\nimport axios from \"axios\";\nimport './App.css';\nimport './covalant_scripts.js';\nimport './style.css';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport SelectCharacter from './Components/SelectCharacter';\nimport myEpicGame from './utils/MyEpicGame.json';\nimport Arena from './Components/Arena';\nimport LoadingIndicator from './Components/LoadingIndicator';\nimport landingimage from './assets/bg.gif'; // relative path to image \n/*\n* Just add transformCharacterData!\n*/\nimport { CONTRACT_ADDRESS, transformCharacterData } from './constants';\n\n// Constants\nconst TWITTER_HANDLE = 'holyaustin';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nconst App = () => {\n  // State\n  const [currentAccount, setCurrentAccount] = useState(null);\n  const [characterNFT, setCharacterNFT] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  //const [data, setData] = useState(null);\n\n  // Actions\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        console.log('Make sure you have MetaMask!');\n        /*\n         * We set isLoading here because we use return in the next line\n         */\n        setIsLoading(false); \n        return;\n      } else {\n        console.log('We have the ethereum object', ethereum);\n\n        const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n        if (accounts.length !== 0) {\n          const account = accounts[0];\n          console.log('Found an authorized account:', account);\n          setCurrentAccount(account);\n        } else {\n          console.log('No authorized account found');\n        }\n      }\n    } catch (error) {\n      console.log(error);\n    }\n        /*\n     * We release the state property after all the function logic\n     */\n        setIsLoading(false);\n  };\n\n// Render Methods\nconst renderContent = () => {\n   /*\n   * If the app is currently loading, just render out LoadingIndicator\n   */\n   if (isLoading) {\n    return <LoadingIndicator />;\n  }\n\n  if (!currentAccount) {\n    return (\n      <div className=\"connect-wallet-container\">\n        <img\n          src= {landingimage}\n          alt=\"homepage Gif\"\n        />\n        <button\n          className=\"cta-button connect-wallet-button\"\n          onClick={connectWalletAction}\n        >\n          Connect Wallet To Get Started\n        </button>\n      </div>\n    );\n\n  } else if (currentAccount && !characterNFT) {\n  //} else if (currentAccount) {\n    return <SelectCharacter setCharacterNFT={setCharacterNFT} />;\t\n    \n\t/*\n\t* If there is a connected wallet and characterNFT, it's time to battle!\n\t*/\n  } else if (currentAccount && characterNFT) {\n    return <Arena characterNFT={characterNFT} setCharacterNFT={setCharacterNFT} />;\n  }\n}; \n\n\nconst checkNetwork = async () => {\n  try { \n    if (window.ethereum.networkVersion !== '4') {\n      //alert(\"Please connect to Rinkeby!\")\n    }\n  } catch(error) {\n    console.log(error)\n  }\n}\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWalletAction = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert('Get MetaMask!');\n        return;\n      }\n      \n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log('Connected', accounts[0]);\n      setCurrentAccount(accounts[0]);\n    } catch (error) {\n      console.log(error);\n    }\n    \n  };\n\n// UseEffects\nuseEffect(() => {\n  /*\n   * Anytime our component mounts, make sure to immiediately set our loading state\n   */\n  setIsLoading(true);\n  checkIfWalletIsConnected();\n}, []);\n\n  /*\n * Add this useEffect right under the other useEffect where you are calling checkIfWalletIsConnected\n */\nuseEffect(() => {\n  /*\n   * The function we will call that interacts with out smart contract\n   */\n  const fetchNFTMetadata = async () => {\n    console.log('Checking for Character NFT on address:', currentAccount);\n    checkNetwork()\n\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const gameContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicGame.abi,\n      signer\n    );\n\n    const characterNFT = await gameContract.checkIfUserHasNFT();\n    if (characterNFT.name) {\n      console.log('User has character NFT');\n      setCharacterNFT(transformCharacterData(characterNFT));\n    }\n\n    /*\n     * Once we are done with all the fetching, set loading state to false\n     */\n    setIsLoading(false);\n  };\n\n  if (currentAccount) {\n    console.log('CurrentAccount:', currentAccount);\n    fetchNFTMetadata();\n  }\n}, [currentAccount]);\n\n     //--------------------------------------------------------------------\n      //Covalent\n      const covalent = \"https://api.covalenthq.com/v1/1/address/\" + currentAccount + \"/transactions_v2/?quote-currency=USD&format=JSON&block-signed-at-asc=false&no-logs=false&key=\" + process.env.COVALENT_API_CKEY;\n      const covalentRes = axios.get(covalent);\n      //setCovalentData(covalentRes.data.data);\n      console.log(covalentRes.data.data);\n    //--------------------------------------------------------------------\n\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">⚔️ Soldier Ant Colony⚔️</p>\n          < br />\n          <p className=\"sub-text\">Quest for food ... Only lucky colonies grab the food!</p>\n          < br />\n        {/* This is where our button and image code used to be!\n         *\tRemember we moved it into the render method.\n         */}\n        {renderContent()}\n        <p className=\"header gradient-text\">⚔️ How to play⚔️</p>\n          <p className=\"sub-text\">Connect you wallet</p>\n          <p className=\"sub-text\">Mint a character from our Marketplace</p>\n          <p className=\"sub-text\">Enagege in the quest to get the lucky food slide</p>\n          <p className=\"sub-text\">You win if you get the food before your life decresaes to nothing</p> \n          <p className=\"sub-text\">You earn a reward</p>    \n                    < br />\n        <p className=\"header gradient-text\"> Game NFT Dashbaord</p>\n\n        <h2>Select an NFT : </h2>\n      <select class=\"input_field\" name=\"address\" id=\"address\">\n      </select>\n      <br /><br />\n      <h2>Enter NFT ID (between 1-100):</h2> <input type=\"text\" size=\"60\" id=\"tokenId\" value=\"1\"/>\n      <button class=\"btn btn-primary\" onclick=\"getNFTMetaData()\">Get NFT Data!</button>\n      <br/><br/>\n      <h2>Metadata</h2>\n      <ul id=\"metadata\"></ul>\n\n      <h2>NFT Data</h2>\n      <table id=\"tokenTable\" class=\"table table-striped\"></table>\n\n\n\n        </div>\n\n        \n\n\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`developed by @${TWITTER_HANDLE} Sponsored by IPFS, Pinata, Covalent, Vailist, Tableland, NFTPort, Quixotec, Lighthouse`}</a>\n\n          \n\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}